// Generated by CoffeeScript 1.6.3
var Analizer, Application, Audio, Circle, Fader, MathUtils, Mixer8, Sampler, Vec2, Visualizer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Vec2 = (function() {
  function Vec2(x, y) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
  }

  return Vec2;

})();

MathUtils = (function() {
  function MathUtils() {}

  MathUtils.calculateControlPoints = function(points, factor) {
    var controlPoints, cp, cur, endIndex, i, next, prev, startIndex, _i, _ref;
    if (factor == null) {
      factor = 0.5;
    }
    startIndex = 1;
    endIndex = points.length;
    cp = new Array();
    controlPoints = new Array();
    for (i = _i = startIndex, _ref = endIndex + 1; startIndex <= _ref ? _i < _ref : _i > _ref; i = startIndex <= _ref ? ++_i : --_i) {
      prev = i - 1;
      cur = i % endIndex;
      next = (i + 1) % endIndex;
      cp = this.getControlPoints(points[prev], points[cur], points[next], factor);
      controlPoints.push(cp[0]);
      controlPoints.push(cp[1]);
    }
    return controlPoints;
  };

  MathUtils.getControlPoints = function(p1, p2, p3, t) {
    var d1, d2, fa, fb, point1, point2;
    d1 = Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
    d2 = Math.sqrt(Math.pow(p3.x - p2.x, 2) + Math.pow(p3.y - p2.y, 2));
    fa = t * d1 / (d1 + d2);
    fb = t - fa;
    point1 = new Vec2(Math.round(p2.x + fa * (p1.x - p3.x)), Math.round(p2.y + fa * (p1.y - p3.y)));
    point2 = new Vec2(Math.round(p2.x - fb * (p1.x - p3.x)), Math.round(p2.y - fb * (p1.y - p3.y)));
    return [point1, point2];
  };

  return MathUtils;

})();

Circle = (function() {
  Circle.prototype.position = {
    x: 0,
    y: 0
  };

  Circle.prototype.points = [];

  function Circle(context, octaves, radius, color) {
    if (octaves == null) {
      octaves = 6;
    }
    if (radius == null) {
      radius = 150;
    }
    if (color == null) {
      color = '#0FF';
    }
    this.context = context;
    this.octaves = octaves;
    this.radius = radius;
    this.indexes = new Float32Array(this.octaves);
    this.color = color;
  }

  Circle.prototype.translate = function(x, y) {
    this.position.x = x;
    this.position.y = y;
    return null;
  };

  Circle.prototype.feed = function(index, value) {
    this.indexes[index] = value;
    return null;
  };

  Circle.prototype.draw = function() {
    var a, b, c, d, i, newPoints, _i, _ref;
    this.getOctavesPosition();
    newPoints = MathUtils.calculateControlPoints(this.points, 0.5);
    a = 0;
    b = 0;
    this.context.beginPath();
    this.context.strokeStyle = this.color;
    for (i = _i = 0, _ref = this.points.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      a = i;
      b = (i * 2 + newPoints.length - 1) % newPoints.length;
      c = i * 2;
      d = (i + 1) % this.points.length;
      this.context.moveTo(this.points[a].x, this.points[a].y);
      this.context.bezierCurveTo(newPoints[b].x, newPoints[b].y, newPoints[c].x, newPoints[c].y, this.points[d].x, this.points[d].y);
    }
    this.context.lineWidth = 1;
    this.context.stroke();
    this.context.closePath();
    /* DEBUG POINTS*/

    /*
    for j in [0...newPoints.length]
      @context.beginPath()
      @context.arc(newPoints[j].x, newPoints[j].y, 1, 0, 2 * Math.PI, false)
      @context.fillStyle = 'green'
      @context.fill()
      @context.closePath()
    for i in [0...@points.length]
      @context.beginPath() 
      @context.arc(@points[i].x, @points[i].y, 1, 0, 2 * Math.PI, false)
      @context.fillStyle = 'cyan'
      @context.fill()
      @context.closePath()
    */

    return null;
  };

  Circle.prototype.getOctavesPosition = function() {
    var angle, i, x, y, _i, _ref;
    this.points = [];
    for (i = _i = 0, _ref = this.octaves; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      angle = i * Math.PI * 2 / this.octaves;
      x = this.position.x + Math.cos(angle) * (this.radius + this.indexes[i]);
      y = this.position.y + Math.sin(angle) * (this.radius + this.indexes[i]);
      this.points.push({
        x: x,
        y: y
      });
    }
    return null;
  };

  return Circle;

})();

Analizer = (function() {
  function Analizer(input, fftSize) {
    if (fftSize == null) {
      fftSize = 2048;
    }
    this.input = input;
    this.fftSize = fftSize;
    this.output = this.input.context.createAnalyser();
    this.output.fftSize = this.fftSize;
    this.input.connect(this.output);
  }

  Analizer.prototype.analyze = function() {
    var freqByteData;
    freqByteData = new Uint8Array(this.output.frequencyBinCount);
    this.output.getByteFrequencyData(freqByteData);
    return freqByteData;
  };

  Analizer.prototype.average = function() {
    var data, i, total, values, _i;
    data = this.analyze();
    values = 0;
    total = data.length;
    for (i = _i = 0; 0 <= total ? _i < total : _i > total; i = 0 <= total ? ++_i : --_i) {
      values += data[i];
    }
    return values / total;
  };

  Analizer.prototype.octaves = function(count) {
    var data, i, octaves, _i;
    data = this.analyze();
    octaves = [];
    for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {
      octaves.push(data[i] / 2);
    }
    return octaves;
  };

  return Analizer;

})();

Visualizer = (function() {
  Visualizer.WAIT = 'fa-spinner fa-spin';

  Visualizer.STOP = 'fa-stop';

  Visualizer.PLAY = 'fa-play';

  Visualizer.prototype.playing = false;

  Visualizer.prototype.circles = [];

  Visualizer.prototype.analyzers = [];

  Visualizer.prototype.precision = 0.03;

  function Visualizer(mixer) {
    this.render = __bind(this.render, this);
    this.togglePlayback = __bind(this.togglePlayback, this);
    this.toggleInfo = __bind(this.toggleInfo, this);
    this.handleKey = __bind(this.handleKey, this);
    this.handleClickTouch = __bind(this.handleClickTouch, this);
    this.handleKeyDown = __bind(this.handleKeyDown, this);
    this.resize = __bind(this.resize, this);
    this.canvas = document.createElement('canvas');
    this.context = this.canvas.getContext('2d');
    document.body.appendChild(this.canvas);
    window.addEventListener('resize', this.resize, false);
    this.mixer = mixer;
    this.init();
  }

  Visualizer.prototype.init = function() {
    var i, _i;
    for (i = _i = 0; _i < 5; i = ++_i) {
      this.circles.push(new Circle(this.context));
      this.analyzers.push(new Analizer(this.mixer.channels[i].input));
    }
    this.handleState(Visualizer.WAIT);
    this.resize();
    this.render();
    return null;
  };

  Visualizer.prototype.resize = function(e) {
    var i, _i, _ref;
    this.width = window.innerWidth;
    this.height = window.innerHeight;
    this.canvas.width = this.width;
    this.canvas.height = this.height;
    for (i = _i = 0, _ref = this.circles.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.circles[i].translate(this.width / 2, this.height / 2);
    }
    return null;
  };

  Visualizer.prototype.enableControls = function() {
    $('#loop-A').bind('click touchstart', this.handleClickTouch);
    $('#loop-S').bind('click touchstart', this.handleClickTouch);
    $('#loop-D').bind('click touchstart', this.handleClickTouch);
    $('#loop-F').bind('click touchstart', this.handleClickTouch);
    $('#loop-G').bind('click touchstart', this.handleClickTouch);
    $('#info').bind('click touchstart', this.toggleInfo);
    $('#playback').bind('click touchstart', this.togglePlayback);
    window.addEventListener('keydown', this.handleKeyDown);
    return null;
  };

  Visualizer.prototype.handleKeyDown = function(e) {
    switch (e.keyCode) {
      case 65:
        this.handleKey('A');
        break;
      case 83:
        this.handleKey('S');
        break;
      case 68:
        this.handleKey('D');
        break;
      case 70:
        this.handleKey('F');
        break;
      case 71:
        this.handleKey('G');
        break;
      case 32:
        this.togglePlayback();
    }
    return null;
  };

  Visualizer.prototype.handleClickTouch = function(e) {
    this.handleKey($(e.currentTarget)[0].id.split('-')[1]);
    return null;
  };

  Visualizer.prototype.handleKey = function(key) {
    var maps, target;
    target = $('#loop-' + key);
    maps = [];
    maps['A'] = 0;
    maps['S'] = 1;
    maps['D'] = 2;
    maps['F'] = 3;
    maps['G'] = 4;
    target.toggleClass('enable');
    if (target.hasClass('enable')) {
      Application.STAGE.mixer.dispatch(maps[key], 1);
    } else {
      Application.STAGE.mixer.dispatch(maps[key], 0);
    }
    return null;
  };

  Visualizer.prototype.toggleInfo = function(e) {
    $('#info').toggleClass('enable');
    if ($('#info').hasClass('enable')) {
      $('#more-info').show().css({
        'display': 'table'
      });
    } else {
      $('#more-info').hide();
    }
    return null;
  };

  Visualizer.prototype.togglePlayback = function(e) {
    this.playing = !this.playing;
    this.handleState(this.playing === true ? Visualizer.PLAY : Visualizer.STOP);
    return null;
  };

  Visualizer.prototype.handleState = function(state) {
    $('#playback span i').removeClass(Visualizer.WAIT);
    $('#playback span i').removeClass(Visualizer.STOP);
    $('#playback span i').removeClass(Visualizer.PLAY);
    $('#playback span i').addClass(state);
    if (state === Visualizer.PLAY) {
      Application.STAGE.playback.dispatch('stop');
    } else if (state === Visualizer.STOP) {
      Application.STAGE.playback.dispatch('play');
    }
    return null;
  };

  Visualizer.prototype.render = function() {
    var circle, i, j, value, _i, _j, _ref, _ref1;
    this.context.fillStyle = 'rgba(0,0,0,' + this.precision + ')';
    this.context.fillRect(0, 0, this.width, this.height);
    for (i = _i = 0, _ref = this.circles.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      circle = this.circles[i];
      value = this.analyzers[i].octaves(circle.octaves);
      for (j = _j = 0, _ref1 = circle.octaves; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        circle.feed(j, value[j]);
      }
      circle.draw();
    }
    requestAnimationFrame(this.render);
    return null;
  };

  return Visualizer;

})();

Fader = (function() {
  function Fader(context, output) {
    this.context = context;
    this.volume = 1;
    this.input = this.context.createGain();
    this.output = output;
    this.input.connect(this.output);
  }

  Fader.prototype.changeVolume = function(value) {
    var fraction;
    this.volume = value;
    fraction = value / 1;
    this.input.gain.value = fraction * fraction;
    return null;
  };

  return Fader;

})();

Mixer8 = (function() {
  Mixer8.prototype.channels = [];

  function Mixer8(context) {
    this.context = context;
    this.master = new Fader(this.context, this.context.destination);
    this.channels[0] = new Fader(this.context, this.master.input);
    this.channels[1] = new Fader(this.context, this.master.input);
    this.channels[2] = new Fader(this.context, this.master.input);
    this.channels[3] = new Fader(this.context, this.master.input);
    this.channels[4] = new Fader(this.context, this.master.input);
    this.channels[5] = new Fader(this.context, this.master.input);
    this.channels[6] = new Fader(this.context, this.master.input);
    this.channels[7] = new Fader(this.context, this.master.input);
  }

  return Mixer8;

})();

Sampler = (function() {
  function Sampler(context) {
    this.context = context;
    this.memory = {
      files: [],
      buffers: [],
      sources: []
    };
    this.signals = {};
    this.signals.progress = new signals.Signal();
    this.signals.complete = new signals.Signal();
  }

  Sampler.prototype.add = function(url) {
    this.memory.files.push(url);
    return null;
  };

  Sampler.prototype.load = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.memory.files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.loadBuffer(this.memory.files[i]));
    }
    return _results;
  };

  Sampler.prototype.loadBuffer = function(url) {
    var request,
      _this = this;
    request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = "arraybuffer";
    request.onload = function() {
      _this.context.decodeAudioData(request.response, function(buffer) {
        if (!buffer) {
          console.error('error decoding audio buffer for', url);
          return;
        }
        _this.memory.buffers[url] = buffer;
        _this.signals.progress.dispatch('progress', {
          'progress': Object.keys(_this.memory.buffers).length,
          'total': _this.memory.files.length
        });
        if (Object.keys(_this.memory.buffers).length === _this.memory.files.length) {
          _this.signals.complete.dispatch('complete', {});
        }
        return null;
      }, function(error) {
        console.error('decode error', error);
      });
      return null;
    };
    request.send();
    return null;
  };

  return Sampler;

})();

Audio = (function() {
  Audio.prototype.isPlaying = false;

  Audio.prototype.sources = [];

  function Audio() {
    this.onSamplerComplete = __bind(this.onSamplerComplete, this);
    this.onSamplerProgress = __bind(this.onSamplerProgress, this);
    this.context = new webkitAudioContext();
    this.mixer = new Mixer8(this.context);
    this.sampler = new Sampler(this.context);
    this.sampler.signals.progress.add(this.onSamplerProgress);
    this.sampler.signals.complete.add(this.onSamplerComplete);
    this.sampler.add('mp3/radiohead/Nude (Drum Stem).mp3');
    this.sampler.add('mp3/radiohead/Nude (Bass Stem).mp3');
    this.sampler.add('mp3/radiohead/Nude (Guitar Stem).mp3');
    this.sampler.add('mp3/radiohead/Nude (String FX Stem).mp3');
    this.sampler.add('mp3/radiohead/Nude (Voice Stem).mp3');
    this.sampler.load();
  }

  Audio.prototype.onSamplerProgress = function(type, params) {
    console.log('Loading sound', params.progress, 'of', params.total);
    return null;
  };

  Audio.prototype.onSamplerComplete = function(type, params) {
    Application.STAGE.playback.dispatch('ready');
    return null;
  };

  Audio.prototype.playAll = function() {
    var i, input, instrument, _i, _ref;
    if (this.isPlaying === true) {
      return;
    }
    this.isPlaying = true;
    for (i = _i = 0, _ref = this.sampler.memory.files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      instrument = this.sampler.memory.buffers[this.sampler.memory.files[i]];
      input = this.mixer.channels[i].input;
      this.playSound(instrument, input);
    }
    return null;
  };

  Audio.prototype.stopAll = function() {
    var i, source, _i, _ref;
    if (this.isPlaying === false) {
      return;
    }
    this.isPlaying = false;
    for (i = _i = 0, _ref = this.sources.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      source = this.sources[i];
      if (!source.stop) {
        source.stop = source.noteOff;
      }
      source.stop(0);
    }
    this.sources = [];
    return null;
  };

  Audio.prototype.playSound = function(buffer, input, time_, loop_) {
    var source;
    if (time_ == null) {
      time_ = 0;
    }
    if (loop_ == null) {
      loop_ = false;
    }
    source = this.context.createBufferSource();
    source.buffer = buffer;
    source.connect(input);
    source.loop = loop_;
    if (!source.start) {
      source.start = source.noteOn;
    }
    source.start(time_);
    this.sources.push(source);
    return null;
  };

  return Audio;

})();

Application = (function() {
  Application.STAGE = {};

  function Application() {
    this.onMixer = __bind(this.onMixer, this);
    this.onPlayback = __bind(this.onPlayback, this);
    var color, colors, gui, i, _i,
      _this = this;
    this.colors = {
      drums: '#ff0000',
      bass: '#6d89e3',
      guitar: '#a2e368',
      effects: '#00afa3',
      voice: '#ffffff'
    };
    Application.STAGE.playback = new signals.Signal();
    Application.STAGE.playback.add(this.onPlayback);
    Application.STAGE.mixer = new signals.Signal();
    Application.STAGE.mixer.add(this.onMixer);
    this.audio = new Audio();
    this.visualizer = new Visualizer(this.audio.mixer, this.colors);
    gui = new dat.GUI();
    colors = gui.addFolder('Colors');
    colors.open();
    colors.addColor(this.colors, 'drums').onChange(function(value) {
      return _this.changeColor(0, value);
    });
    colors.addColor(this.colors, 'bass').onChange(function(value) {
      return _this.changeColor(1, value);
    });
    colors.addColor(this.colors, 'guitar').onChange(function(value) {
      return _this.changeColor(2, value);
    });
    colors.addColor(this.colors, 'effects').onChange(function(value) {
      return _this.changeColor(3, value);
    });
    colors.addColor(this.colors, 'voice').onChange(function(value) {
      return _this.changeColor(4, value);
    });
    colors.add(this.visualizer, 'precision', 0, 1).step(0.01).name('motion blur');
    for (i = _i = 0; _i < 5; i = ++_i) {
      color = this.transformIndexIntoColor(i);
      this.changeColor(i, color);
    }
  }

  Application.prototype.changeColor = function(index, color) {
    var id;
    this.visualizer.circles[index].color = color;
    id = this.transformIndexIntoId(index);
    $(id).css({
      'border': '1px solid ' + color,
      'box-shadow': '0px 0px 14px ' + color,
      'color': color
    });
    return null;
  };

  Application.prototype.transformIndexIntoColor = function(index) {
    var color;
    color = '';
    switch (index) {
      case 0:
        color = this.colors.drums;
        break;
      case 1:
        color = this.colors.bass;
        break;
      case 2:
        color = this.colors.guitar;
        break;
      case 3:
        color = this.colors.effects;
        break;
      case 4:
        color = this.colors.voice;
    }
    return color;
  };

  Application.prototype.transformIndexIntoId = function(index) {
    var id;
    id = '';
    switch (index) {
      case 0:
        id = '#loop-A';
        break;
      case 1:
        id = '#loop-S';
        break;
      case 2:
        id = '#loop-D';
        break;
      case 3:
        id = '#loop-F';
        break;
      case 4:
        id = '#loop-G';
    }
    return id;
  };

  Application.prototype.onPlayback = function(value) {
    switch (value) {
      case 'ready':
        this.visualizer.enableControls();
        this.visualizer.handleState(Visualizer.STOP);
        break;
      case 'play':
        this.audio.playAll();
        break;
      case 'stop':
        this.audio.stopAll();
    }
    return null;
  };

  Application.prototype.onMixer = function(track, value) {
    var color, id, target;
    this.audio.mixer.channels[track].changeVolume(value);
    id = this.transformIndexIntoId(track);
    color = this.transformIndexIntoColor(track);
    target = $(id);
    if (!target.hasClass('enable')) {
      target.css({
        'border': '1px solid #666',
        'box-shadow': 'none'
      });
    } else {
      target.css({
        'border': '1px solid ' + color,
        'box-shadow': '0px 0px 14px ' + color
      });
    }
    return null;
  };

  return Application;

})();
