// Generated by CoffeeScript 1.6.3
var Application, Sampler;

Sampler = (function() {
  function Sampler(context, callback) {
    this.context = context;
    this.onload = callback;
    this.count = 0;
  }

  Sampler.prototype.load = function(url) {
    this.count++;
    return null;
  };

  Sampler.prototype.loadBuffer = function(url, index) {
    var request,
      _this = this;
    request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = "arraybuffer";
    request.onload = function() {
      return console.log(request, _this);
    };
    return null;
  };

  return Sampler;

})();

/*
BufferLoader.prototype.loadBuffer = function(url, index) {
  // Load buffer asynchronously
  var request = new XMLHttpRequest();
  request.open("GET", url, true);
  request.responseType = "arraybuffer";

  var loader = this;

  request.onload = function() {
    // Asynchronously decode the audio file data in request.response
    loader.context.decodeAudioData(
      request.response,
      function(buffer) {
        if (!buffer) {
          alert('error decoding file data: ' + url);
          return;
        }
        loader.bufferList[index] = buffer;
        if (++loader.loadCount == loader.urlList.length)
          loader.onload(loader.bufferList);
      },
      function(error) {
        console.error('decodeAudioData error', error);
      }
    );
  }

  request.onerror = function() {
    alert('BufferLoader: XHR error');
  }

  request.send();
}

BufferLoader.prototype.load = function() {
  for (var i = 0; i < this.urlList.length; ++i)
  this.loadBuffer(this.urlList[i], i);
}
*/


Application = (function() {
  function Application() {
    this.gui = new dat.GUI();
    this.context = new webkitAudioContext();
    this.sampler = new Sampler(this.context);
  }

  return Application;

})();
