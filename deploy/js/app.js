// Generated by CoffeeScript 1.6.3
/*
loads all samples, this is where we access all the bufferdata from all the audio files
*/

var Application, Mixer16, Sampler,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Sampler = (function() {
  function Sampler(context) {
    this.context = context;
    this.memory = {
      files: [],
      buffers: []
    };
  }

  Sampler.prototype.add = function(url) {
    this.memory.files.push(url);
    return null;
  };

  Sampler.prototype.load = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.memory.files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.loadBuffer(this.memory.files[i]));
    }
    return _results;
  };

  Sampler.prototype.loadBuffer = function(url) {
    var request,
      _this = this;
    request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = "arraybuffer";
    request.onload = function() {
      _this.context.decodeAudioData(request.response, function(buffer) {
        var progress, total;
        if (!buffer) {
          console.error('error decoding audio buffer for', url);
          return;
        }
        _this.memory.buffers[url] = buffer;
        progress = Object.keys(_this.memory.buffers).length;
        total = _this.memory.files.length;
        window.dispatchEvent(new CustomEvent('sampler-load-progress', {
          detail: {
            progress: progress,
            total: total
          }
        }));
        if (Object.keys(_this.memory.buffers).length === _this.memory.files.length) {
          window.dispatchEvent(new CustomEvent('sampler-load-complete'));
        }
        return null;
      }, function(error) {
        console.error('decode error', error);
      });
      return null;
    };
    request.send();
    return null;
  };

  return Sampler;

})();

Mixer16 = (function() {
  function Mixer16() {
    /*
    // Create a gain node.
    var gainNode = context.createGain();
    // Connect the source to the gain node.
    source.connect(gainNode);
    // Connect the gain node to the destination.
    gainNode.connect(context.destination);
    */

  }

  return Mixer16;

})();

Application = (function() {
  Application.prototype.loadedSamples = '';

  function Application() {
    this.playAll = __bind(this.playAll, this);
    this.onSamplerLoadComplete = __bind(this.onSamplerLoadComplete, this);
    this.onSamplerLoadProgress = __bind(this.onSamplerLoadProgress, this);
    this.gui = new dat.GUI();
    this.progressbar = this.gui.add(this, 'loadedSamples').listen();
    this.context = new webkitAudioContext();
    this.mixer = new Mixer16();
    window.addEventListener('sampler-load-progress', this.onSamplerLoadProgress, false);
    window.addEventListener('sampler-load-complete', this.onSamplerLoadComplete, false);
    this.sampler = new Sampler(this.context);
    this.sampler.add('wav/Nude (Bass Stem).wav');
    this.sampler.add('wav/Nude (Drum Stem).wav');
    this.sampler.add('wav/Nude (Guitar Stem).wav');
    this.sampler.add('wav/Nude (String FX Stem).wav');
    this.sampler.add('wav/Nude (Voice Stem).wav');
    this.sampler.load();
  }

  Application.prototype.onSamplerLoadProgress = function(e) {
    this.loadedSamples = 'Loading ' + e.detail.progress + '/' + e.detail.total;
    return null;
  };

  Application.prototype.onSamplerLoadComplete = function(e) {
    this.gui.remove(this.progressbar);
    this.gui.add(this, 'playAll');
    return null;
  };

  Application.prototype.playAll = function() {
    var i, _i, _ref;
    console.log('play all sounds');
    for (i = _i = 0, _ref = this.sampler.memory.files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.playSound(this.sampler.memory.buffers[this.sampler.memory.files[i]]);
    }
    return null;
  };

  Application.prototype.playSound = function(buffer, time) {
    var source;
    source = this.context.createBufferSource();
    source.buffer = buffer;
    source.connect(this.context.destination);
    source.start(time);
    return null;
  };

  return Application;

})();
