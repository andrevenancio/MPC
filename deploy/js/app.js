// Generated by CoffeeScript 1.6.3
var Application, Audio, Fader, Mixer8, Sampler, Visualizer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Visualizer = (function() {
  Visualizer.prototype.playing = false;

  Visualizer.WAIT = 'fa-spinner fa-spin';

  Visualizer.STOP = 'fa-stop';

  Visualizer.PLAY = 'fa-play';

  function Visualizer() {
    this.togglePlayback = __bind(this.togglePlayback, this);
    this.toggleInfo = __bind(this.toggleInfo, this);
    this.handleKey = __bind(this.handleKey, this);
    this.handleClickTouch = __bind(this.handleClickTouch, this);
    this.handleKeyDown = __bind(this.handleKeyDown, this);
    this.handleState(Visualizer.WAIT);
  }

  Visualizer.prototype.enableControls = function() {
    $('#pad-A').bind('click touchstart', this.handleClickTouch);
    $('#pad-S').bind('click touchstart', this.handleClickTouch);
    $('#pad-D').bind('click touchstart', this.handleClickTouch);
    $('#pad-F').bind('click touchstart', this.handleClickTouch);
    $('#pad-G').bind('click touchstart', this.handleClickTouch);
    $('#info').bind('click touchstart', this.toggleInfo);
    $('#playback').bind('click touchstart', this.togglePlayback);
    window.addEventListener('keydown', this.handleKeyDown);
    return null;
  };

  Visualizer.prototype.handleKeyDown = function(e) {
    switch (e.keyCode) {
      case 65:
        this.handleKey('A');
        break;
      case 83:
        this.handleKey('S');
        break;
      case 68:
        this.handleKey('D');
        break;
      case 70:
        this.handleKey('F');
        break;
      case 71:
        this.handleKey('G');
        break;
      case 32:
        this.togglePlayback();
    }
    return null;
  };

  Visualizer.prototype.handleClickTouch = function(e) {
    this.handleKey($(e.currentTarget).find('span').text());
    return null;
  };

  Visualizer.prototype.handleKey = function(key) {
    var maps, target;
    target = $('#pad-' + key);
    maps = [];
    maps['A'] = 0;
    maps['S'] = 1;
    maps['D'] = 2;
    maps['F'] = 3;
    maps['G'] = 4;
    target.toggleClass('enable');
    if (target.hasClass('enable')) {
      Application.STAGE.mixer.dispatch(maps[key], 1);
    } else {
      Application.STAGE.mixer.dispatch(maps[key], 0);
    }
    return null;
  };

  Visualizer.prototype.toggleInfo = function(e) {
    $('#info').toggleClass('enable');
    if ($('#info').hasClass('enable')) {
      $('#more-info').show().css({
        'display': 'table'
      });
    } else {
      $('#more-info').hide();
    }
    return null;
  };

  Visualizer.prototype.togglePlayback = function(e) {
    this.playing = !this.playing;
    this.handleState(this.playing === true ? Visualizer.PLAY : Visualizer.STOP);
    return null;
  };

  Visualizer.prototype.handleState = function(state) {
    $('#playback span i').removeClass(Visualizer.WAIT);
    $('#playback span i').removeClass(Visualizer.STOP);
    $('#playback span i').removeClass(Visualizer.PLAY);
    $('#playback span i').addClass(state);
    if (state === Visualizer.STOP) {
      Application.STAGE.playback.dispatch('stop');
    } else if (state === Visualizer.PLAY) {
      Application.STAGE.playback.dispatch('play');
    }
    return null;
  };

  return Visualizer;

})();

Fader = (function() {
  function Fader(context, output) {
    this.context = context;
    this.volume = 1;
    this.input = this.context.createGain();
    this.output = output;
    this.input.connect(this.output);
  }

  Fader.prototype.changeVolume = function(value) {
    var fraction;
    this.volume = value;
    fraction = value / 1;
    this.input.gain.value = fraction * fraction;
    return null;
  };

  return Fader;

})();

Mixer8 = (function() {
  Mixer8.prototype.channels = [];

  function Mixer8(context) {
    this.context = context;
    this.master = new Fader(this.context, this.context.destination);
    this.channels[0] = new Fader(this.context, this.master.input);
    this.channels[1] = new Fader(this.context, this.master.input);
    this.channels[2] = new Fader(this.context, this.master.input);
    this.channels[3] = new Fader(this.context, this.master.input);
    this.channels[4] = new Fader(this.context, this.master.input);
    this.channels[5] = new Fader(this.context, this.master.input);
    this.channels[6] = new Fader(this.context, this.master.input);
    this.channels[7] = new Fader(this.context, this.master.input);
  }

  return Mixer8;

})();

Sampler = (function() {
  function Sampler(context) {
    this.context = context;
    this.memory = {
      files: [],
      buffers: [],
      sources: []
    };
    this.signals = {};
    this.signals.progress = new signals.Signal();
    this.signals.complete = new signals.Signal();
  }

  Sampler.prototype.add = function(url) {
    this.memory.files.push(url);
    return null;
  };

  Sampler.prototype.load = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.memory.files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.loadBuffer(this.memory.files[i]));
    }
    return _results;
  };

  Sampler.prototype.loadBuffer = function(url) {
    var request,
      _this = this;
    request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = "arraybuffer";
    request.onload = function() {
      _this.context.decodeAudioData(request.response, function(buffer) {
        if (!buffer) {
          console.error('error decoding audio buffer for', url);
          return;
        }
        _this.memory.buffers[url] = buffer;
        _this.signals.progress.dispatch('progress', {
          'progress': Object.keys(_this.memory.buffers).length,
          'total': _this.memory.files.length
        });
        if (Object.keys(_this.memory.buffers).length === _this.memory.files.length) {
          _this.signals.complete.dispatch('complete', {});
        }
        return null;
      }, function(error) {
        console.error('decode error', error);
      });
      return null;
    };
    request.send();
    return null;
  };

  return Sampler;

})();

Audio = (function() {
  Audio.prototype.isPlaying = false;

  Audio.prototype.sources = [];

  function Audio() {
    this.onSamplerComplete = __bind(this.onSamplerComplete, this);
    this.onSamplerProgress = __bind(this.onSamplerProgress, this);
    this.context = new webkitAudioContext();
    this.mixer = new Mixer8(this.context);
    this.sampler = new Sampler(this.context);
    this.sampler.signals.progress.add(this.onSamplerProgress);
    this.sampler.signals.complete.add(this.onSamplerComplete);
    this.sampler.add('mp3/radiohead/Nude (Drum Stem).mp3');
    this.sampler.add('mp3/radiohead/Nude (Bass Stem).mp3');
    this.sampler.add('mp3/radiohead/Nude (Guitar Stem).mp3');
    this.sampler.add('mp3/radiohead/Nude (String FX Stem).mp3');
    this.sampler.add('mp3/radiohead/Nude (Voice Stem).mp3');
    this.sampler.load();
  }

  Audio.prototype.onSamplerProgress = function(type, params) {
    console.log('Loading sound', params.progress, 'of', params.total);
    return null;
  };

  Audio.prototype.onSamplerComplete = function(type, params) {
    Application.STAGE.playback.dispatch('ready');
    return null;
  };

  Audio.prototype.playAll = function() {
    var i, input, instrument, _i, _ref;
    if (this.isPlaying === true) {
      return;
    }
    this.isPlaying = true;
    for (i = _i = 0, _ref = this.sampler.memory.files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      instrument = this.sampler.memory.buffers[this.sampler.memory.files[i]];
      input = this.mixer.channels[i].input;
      this.playSound(instrument, input);
    }
    return null;
  };

  Audio.prototype.stopAll = function() {
    var i, source, _i, _ref;
    if (this.isPlaying === false) {
      return;
    }
    this.isPlaying = false;
    for (i = _i = 0, _ref = this.sources.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      source = this.sources[i];
      if (!source.stop) {
        source.stop = source.noteOff;
      }
      source.stop(0);
    }
    this.sources = [];
    return null;
  };

  Audio.prototype.playSound = function(buffer, input, time_, loop_) {
    var source;
    if (time_ == null) {
      time_ = 0;
    }
    if (loop_ == null) {
      loop_ = false;
    }
    source = this.context.createBufferSource();
    source.buffer = buffer;
    source.connect(input);
    source.loop = loop_;
    if (!source.start) {
      source.start = source.noteOn;
    }
    source.start(time_);
    this.sources.push(source);
    return null;
  };

  return Audio;

})();

Application = (function() {
  Application.STAGE = {};

  function Application() {
    this.onMixer = __bind(this.onMixer, this);
    this.onPlayback = __bind(this.onPlayback, this);
    Application.STAGE.playback = new signals.Signal();
    Application.STAGE.playback.add(this.onPlayback);
    Application.STAGE.mixer = new signals.Signal();
    Application.STAGE.mixer.add(this.onMixer);
    this.visualizer = new Visualizer();
    this.audio = new Audio();
  }

  Application.prototype.onPlayback = function(value) {
    switch (value) {
      case 'ready':
        this.visualizer.enableControls();
        this.visualizer.handleState(Visualizer.STOP);
        break;
      case 'play':
        this.audio.playAll();
        break;
      case 'stop':
        this.audio.stopAll();
    }
    return null;
  };

  Application.prototype.onMixer = function(track, value) {
    this.audio.mixer.channels[track].changeVolume(value);
    return null;
  };

  return Application;

})();
