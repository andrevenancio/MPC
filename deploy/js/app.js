// Generated by CoffeeScript 1.6.3
var Application, Fader, Mixer8, Sampler,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Sampler = (function() {
  function Sampler(context) {
    this.context = context;
    this.memory = {
      files: [],
      buffers: [],
      sources: []
    };
  }

  Sampler.prototype.add = function(url) {
    this.memory.files.push(url);
    return null;
  };

  Sampler.prototype.load = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.memory.files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.loadBuffer(this.memory.files[i]));
    }
    return _results;
  };

  Sampler.prototype.loadBuffer = function(url) {
    var request,
      _this = this;
    request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = "arraybuffer";
    request.onload = function() {
      _this.context.decodeAudioData(request.response, function(buffer) {
        var progress, total;
        if (!buffer) {
          console.error('error decoding audio buffer for', url);
          return;
        }
        _this.memory.buffers[url] = buffer;
        progress = Object.keys(_this.memory.buffers).length;
        total = _this.memory.files.length;
        window.dispatchEvent(new CustomEvent('sampler-load-progress', {
          detail: {
            progress: progress,
            total: total
          }
        }));
        if (Object.keys(_this.memory.buffers).length === _this.memory.files.length) {
          window.dispatchEvent(new CustomEvent('sampler-load-complete'));
        }
        return null;
      }, function(error) {
        console.error('decode error', error);
      });
      return null;
    };
    request.send();
    return null;
  };

  return Sampler;

})();

Mixer8 = (function() {
  function Mixer8(context) {
    this.context = context;
    this.master = new Fader(this.context, this.context.destination);
    this.channels = [];
    this.channels[0] = new Fader(this.context, this.master.input);
    this.channels[1] = new Fader(this.context, this.master.input);
    this.channels[2] = new Fader(this.context, this.master.input);
    this.channels[3] = new Fader(this.context, this.master.input);
    this.channels[4] = new Fader(this.context, this.master.input);
    this.channels[5] = new Fader(this.context, this.master.input);
    this.channels[6] = new Fader(this.context, this.master.input);
    this.channels[7] = new Fader(this.context, this.master.input);
  }

  return Mixer8;

})();

Fader = (function() {
  function Fader(context, output) {
    this.context = context;
    this.volume = 1;
    this.input = this.context.createGain();
    this.input.connect(output);
  }

  Fader.prototype.changeVolume = function(value) {
    var fraction;
    fraction = value / 1;
    this.input.gain.value = fraction * fraction;
    return null;
  };

  return Fader;

})();

Application = (function() {
  Application.prototype.loadedSamples = '';

  Application.prototype.sources = [];

  Application.prototype.isPlaying = false;

  function Application() {
    this.stopAll = __bind(this.stopAll, this);
    this.playAll = __bind(this.playAll, this);
    this.onSamplerLoadComplete = __bind(this.onSamplerLoadComplete, this);
    this.onSamplerLoadProgress = __bind(this.onSamplerLoadProgress, this);
    console.log('MPC v.0.0.1');
    this.context = new webkitAudioContext();
    this.mixer = new Mixer8(this.context);
    this.sampler = new Sampler(this.context);
    this.sampler.add('wav/Nude (Bass Stem).wav');
    this.sampler.add('wav/Nude (Drum Stem).wav');
    this.sampler.add('wav/Nude (Guitar Stem).wav');
    this.sampler.add('wav/Nude (String FX Stem).wav');
    this.sampler.add('wav/Nude (Voice Stem).wav');
    window.addEventListener('sampler-load-progress', this.onSamplerLoadProgress, false);
    window.addEventListener('sampler-load-complete', this.onSamplerLoadComplete, false);
    this.gui = new dat.GUI();
    this.progressbar = this.gui.add(this, 'loadedSamples').listen();
    this.sampler.load();
  }

  Application.prototype.onSamplerLoadProgress = function(e) {
    this.loadedSamples = 'Loading ' + e.detail.progress + '/' + e.detail.total;
    return null;
  };

  Application.prototype.onSamplerLoadComplete = function(e) {
    var master, mixer,
      _this = this;
    this.gui.remove(this.progressbar);
    mixer = this.gui.addFolder('Mixer');
    mixer.add(this.mixer.channels[0], 'volume', 0, 1).name('Bass').onChange(function(value) {
      return _this.mixer.channels[0].changeVolume(value);
    });
    mixer.add(this.mixer.channels[1], 'volume', 0, 1).name('Drums').onChange(function(value) {
      return _this.mixer.channels[1].changeVolume(value);
    });
    mixer.add(this.mixer.channels[2], 'volume', 0, 1).name('Guitar').onChange(function(value) {
      return _this.mixer.channels[2].changeVolume(value);
    });
    mixer.add(this.mixer.channels[3], 'volume', 0, 1).name('Effects').onChange(function(value) {
      return _this.mixer.channels[3].changeVolume(value);
    });
    mixer.add(this.mixer.channels[4], 'volume', 0, 1).name('Voice').onChange(function(value) {
      return _this.mixer.channels[4].changeVolume(value);
    });
    master = mixer.addFolder('Master');
    master.open();
    master.add(this.mixer.master, 'volume', 0, 1).name('MASTER').onChange(function(value) {
      return _this.mixer.master.changeVolume(value);
    });
    this.gui.add(this, 'playAll').name('Play sounds');
    this.gui.add(this, 'stopAll').name('Stop sounds');
    return null;
  };

  Application.prototype.playAll = function() {
    var i, input, instrument, _i, _ref;
    if (this.isPlaying === true) {
      return;
    }
    this.isPlaying = true;
    for (i = _i = 0, _ref = this.sampler.memory.files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      instrument = this.sampler.memory.buffers[this.sampler.memory.files[i]];
      input = this.mixer.channels[i].input;
      this.playSound(instrument, input);
    }
    return null;
  };

  Application.prototype.stopAll = function() {
    var i, source, _i, _ref;
    if (this.isPlaying === false) {
      return;
    }
    this.isPlaying = false;
    for (i = _i = 0, _ref = this.sources.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      source = this.sources[i];
      if (!source.stop) {
        source.stop = source.noteOff;
      }
      source.stop(0);
    }
    this.sources = [];
    return null;
  };

  Application.prototype.playSound = function(buffer, input, time_, loop_) {
    var source;
    if (time_ == null) {
      time_ = 0;
    }
    if (loop_ == null) {
      loop_ = false;
    }
    source = this.context.createBufferSource();
    source.buffer = buffer;
    source.connect(input);
    source.loop = loop_;
    if (!source.start) {
      source.start = source.noteOn;
    }
    source.start(time_);
    this.sources.push(source);
    return null;
  };

  return Application;

})();
